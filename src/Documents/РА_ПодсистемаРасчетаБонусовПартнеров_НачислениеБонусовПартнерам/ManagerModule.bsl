#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	#Область СлужебныеПроцедурыИФункции
	
	// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
		
	//Акт
	КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "Акт";
	КомандаПечати.Представление = НСтр("ru = 'Акт о выполнении условий для получения премий'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"Акт",
		НСтр("ru = 'Акт о выполнении условий для получения премий'"),
		СформироватьПечатнуюФормуАкта(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуАкта(МассивОбъектов,ОбъектыПечати, ПараметрыПечати) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АКТ";
	
   	ДанныеДляПечати = ПолучитьДанныеДляПечатиАкта(МассивОбъектов);
	
	Макет = ПолучитьМакет("ПФ_MXL_Акт");
	
	ДанныеПоШапке = ДанныеДляПечати.ВыборкаПоШапке;
	ДанныеПоТабличнойЧасти = ДанныеДляПечати.ВыборкаПоТабличнойчасти;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьОбъемЗакупок = Макет.ПолучитьОбласть("ОбъемЗакупок");

	НомерДокумента = 1;
	
	Пока ДанныеПоШапке.Следующий() Цикл
		
		Если НомерДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПредставлениеОрганизации", 
						ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПоШапке.Организация, ДанныеПоШапке.Дата), "ПолноеНаименование"));
						
		СтруктураПараметров.Вставить("ПредставлениеКонтрагента", 
						ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПоШапке.Контрагент, ДанныеПоШапке.Дата), "ПолноеНаименование"));
		
		Если ДанныеПоШапке.Контрагент.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда
			СтруктураПараметров.Вставить("НаОснованииЧего", "Устава");
		ИначеЕсли ДанныеПоШапке.Контрагент.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель") Тогда 	
			СтруктураПараметров.Вставить("НаОснованииЧего", "ОГРНИП " + ДанныеПоШапке.Контрагент.РегистрационныйНомер);	
		КонецЕсли;				
						
		СтруктураПараметров.Вставить("НомерАкта", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПоШапке.Номер, Истина, Истина));
		СтруктураПараметров.Вставить("ДатаАкта", Формат(ДанныеПоШапке.Дата,"ДФ='dd.MM.yyyy ""г.""'"));
		СтруктураПараметров.Вставить("НомерПриложения", ДанныеПоШапке.НомерПриложенияКДоговору);
		СтруктураПараметров.Вставить("ДатаПриложения", Формат(ДанныеПоШапке.ДатаПриложенияКДоговору,"ДФ='dd.MM.yyyy ""г.""'"));
		СтруктураПараметров.Вставить("НомерДоговора", ДанныеПоШапке.ДоговорНомер);
		СтруктураПараметров.Вставить("ДатаДоговора", Формат(ДанныеПоШапке.ДоговорДата,"ДФ='dd.MM.yyyy ""г.""'"));
		СтруктураПараметров.Вставить("ДатаНачалаПрограммы", Формат(ДанныеПоШапке.ПериодДействия.НачалоПериода,"ДФ='dd.MM.yyyy ""г.""'"));
		СтруктураПараметров.Вставить("ДатаОкончанияПрограммы", Формат(ДанныеПоШапке.ПериодДействия.КонецПериода,"ДФ='dd.MM.yyyy ""г.""'"));
		СтруктураПараметров.Вставить("ФиоФинДира", ДанныеПоШапке.ФиоФинДира);
		
		ОтветЛицо = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(ДанныеПоШапке.Организация,
			ДанныеПоШапке.Дата, ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.Руководитель"));

		//@skip-check empty-except-statement
		Попытка
			СтруктураПараметров.Вставить("ПредставлениеГенеральногоДиректораРП", ПолучитьСклоненияСтроки(
				ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ОтветЛицо.ФизическоеЛицо), , "ПД=Родительный")[0]);
		Исключение
				//Ничего не делать
		КонецПопытки;

		//@skip-check empty-except-statement
		Попытка
			СтруктураПараметров.Вставить("ПредставлениеГенеральногоДиректора", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(
				ОтветЛицо.ФизическоеЛицо));
		Исключение
		КонецПопытки;	
		
		//@skip-check empty-except-statement
		Попытка
		СтруктураПараметров.Вставить("ПредставлениеПодписантаКонтрагентаРП", 
			ПолучитьСклоненияСтроки(ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПоШапке.ДоговорКонтактноеЛицо),,"ПД=Родительный")[0]);
		Исключение
		КонецПопытки;
		
		//@skip-check empty-except-statement
		Попытка
		СтруктураПараметров.Вставить("ПредставлениеПодписантаКонтрагента", 
			ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПоШапке.ДоговорКонтактноеЛицо));
		Исключение
		КонецПопытки;
		
		ОбластьШапка.Параметры.Заполнить(СтруктураПараметров);
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ДанныеПоТабличнойЧасти.Сбросить();
		
		Если ДанныеПоТабличнойЧасти.НайтиСледующий(Новый Структура("Ссылка", ДанныеПоШапке.Ссылка)) Тогда
			
			ВыборкаТабличнойЧасти = ДанныеПоТабличнойЧасти.Выбрать();
			
			Пока ВыборкаТабличнойЧасти.Следующий() Цикл
				
				Если ВыборкаТабличнойЧасти.ТипПоказателяПлана = ПредопределенноеЗначение("Перечисление.РА_ТипыПоказателяПлана.НетПлана") 
					ИЛИ ВыборкаТабличнойЧасти.ТипПремии <> ПредопределенноеЗначение("Перечисление.РА_ТипыПремийПартнерам.ПремияЗаВыполнениеПлана") Тогда
					Продолжить;
				КонецЕсли;
				
				//@skip-check query-in-loop
				СтруктураПараметров.Вставить("Производитель", ПолучитьСтрокуПроизводителей(ДанныеПоШапке.Ссылка));
				СтруктураПараметров.Вставить("ЗначениеПлан", ВыборкаТабличнойЧасти.ПоказательПлана);
				СтруктураПараметров.Вставить("ЗначениеФакт", ВыборкаТабличнойЧасти.ПоказательЗакупки);
				СтруктураПараметров.Вставить("СтатусПлана", ?(ВыборкаТабличнойЧасти.ПроцентВыполненияПлана > 100, "Выполнен", "Не выполнен"));
				
				ОбластьОбъемЗакупок.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьОбъемЗакупок);

				
			КонецЦикла;	
			
		КонецЕсли;
		
		ВыборкаТабличнойЧасти.Сбросить();
		
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		СуммаБонусаИтого = 0;
		
		Пока ВыборкаТабличнойЧасти.Следующий() Цикл 
			
			Если ВыборкаТабличнойЧасти.СуммаБонуса < 0.01 Тогда Продолжить; КонецЕсли;
			
			ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
			
			ЗаполнитьЗначенияСвойств(ОбластьСтрокаТаблицы.Параметры, ВыборкаТабличнойЧасти);
			
			СуммаБонусаИтого = СуммаБонусаИтого + ВыборкаТабличнойЧасти.СуммаБонуса;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			
		КонецЦикла;
		
		СтруктураПараметров.Вставить("СуммаБонусаИтого", СуммаБонусаИтого);
		
		ОбластьИтогТаблицы = Макет.ПолучитьОбласть("ТаблицаИтог");
		
		ОбластьИтогТаблицы.Параметры.Заполнить(СтруктураПараметров);
		
		ТабличныйДокумент.Вывести(ОбластьИтогТаблицы);
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвал.Параметры.Заполнить(СтруктураПараметров);
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		НомерДокумента = НомерДокумента + 1;	
		
	КонецЦикла;	
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатиАкта(МассивОбъектов) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РА_НачислениеБонусовПартнерам.Номер КАК Номер,
		|	РА_НачислениеБонусовПартнерам.Дата КАК Дата,
		|	РА_НачислениеБонусовПартнерам.Договор.Номер КАК ДоговорНомер,
		|	РА_НачислениеБонусовПартнерам.Договор.Дата КАК ДоговорДата,
		|	РА_НачислениеБонусовПартнерам.Контрагент КАК Контрагент,
		|	РА_НачислениеБонусовПартнерам.Организация КАК Организация,
		|	РА_НачислениеБонусовПартнерам.Ответственный КАК Ответственный,
		|	РА_НачислениеБонусовПартнерам.Партнер КАК Партнер,
		|	РА_НачислениеБонусовПартнерам.ПериодДействия КАК ПериодДействия,
		|	РА_НачислениеБонусовПартнерам.СуммаБонусовИтого КАК СуммаБонусовИтого,
		|	РА_НачислениеБонусовПартнерам.ФиоФинДира КАК ФиоФинДира,
		|	РА_НачислениеБонусовПартнерам.НомерПриложенияКДоговору КАК НомерПриложенияКДоговору,
		|	РА_НачислениеБонусовПартнерам.ДатаПриложенияКДоговору КАК ДатаПриложенияКДоговору,
		|	РА_НачислениеБонусовПартнерам.Ссылка КАК Ссылка,
		|	РА_НачислениеБонусовПартнерам.Договор КАК Договор,
		|	РА_НачислениеБонусовПартнерам.Договор.КонтактноеЛицо КАК ДоговорКонтактноеЛицо
		|ИЗ
		|	Документ.РА_ПодсистемаРасчетаБонусовПартнеров_НачислениеБонусовПартнерам КАК РА_НачислениеБонусовПартнерам
		|ГДЕ
		|	РА_НачислениеБонусовПартнерам.Ссылка В (&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РА_НачислениеБонусовПартнерамНачисленияАвтоматическийРасчет.Ссылка КАК Ссылка,
		|	СУММА(РА_НачислениеБонусовПартнерамНачисленияАвтоматическийРасчет.ПоказательЗакупки) КАК ПоказательЗакупки,
		|	РА_НачислениеБонусовПартнерамНачисленияАвтоматическийРасчет.ТипПремии КАК ТипПремии,
		|	РА_НачислениеБонусовПартнерамНачисленияАвтоматическийРасчет.ТипПоказателяПлана КАК ТипПоказателяПлана,
		|	РА_НачислениеБонусовПартнерамНачисленияАвтоматическийРасчет.ПроцентПремии КАК ПроцентПремии,
		|	СУММА(РА_НачислениеБонусовПартнерамНачисленияАвтоматическийРасчет.СуммаБонуса) КАК СуммаБонуса,
		|	СУММА(РА_НачислениеБонусовПартнерамНачисленияАвтоматическийРасчет.БонусируемыйОборот) КАК БонусируемыйОборот,
		|	МАКСИМУМ(РА_НачислениеБонусовПартнерамНачисленияАвтоматическийРасчет.ПоказательПлана) КАК ПоказательПлана,
		|	МАКСИМУМ(РА_НачислениеБонусовПартнерамНачисленияАвтоматическийРасчет.ПроцентВыполненияПлана) КАК
		|		ПроцентВыполненияПлана
		|ИЗ
		|	Документ.РА_ПодсистемаРасчетаБонусовПартнеров_НачислениеБонусовПартнерам.НачисленияАвтоматическийРасчет КАК
		|		РА_НачислениеБонусовПартнерамНачисленияАвтоматическийРасчет
		|ГДЕ
		|	РА_НачислениеБонусовПартнерамНачисленияАвтоматическийРасчет.Ссылка В (&МассивОбъектов)
		|СГРУППИРОВАТЬ ПО
		|	РА_НачислениеБонусовПартнерамНачисленияАвтоматическийРасчет.Ссылка,
		|	РА_НачислениеБонусовПартнерамНачисленияАвтоматическийРасчет.ТипПремии,
		|	РА_НачислениеБонусовПартнерамНачисленияАвтоматическийРасчет.ТипПоказателяПлана,
		|	РА_НачислениеБонусовПартнерамНачисленияАвтоматическийРасчет.ПроцентПремии
		|ИТОГИ
		|ПО
		|	Ссылка";

	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоШапке = РезультатЗапроса[0].Выбрать();
	ВыборкаПоТабличнойчасти = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("ВыборкаПоШапке", ВыборкаПоШапке);
	ДанныеДляПечати.Вставить("ВыборкаПоТабличнойчасти", ВыборкаПоТабличнойчасти);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

// Получить строку производителей.
// 
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.РА_ПодсистемаРасчетаБонусовПартнеров_НачислениеБонусовПартнерам
// 
// Возвращаемое значение:
// Строка 
Функция ПолучитьСтрокуПроизводителей(СсылкаНаДокумент)

	Запрос = Новый Запрос;

	Запрос.Текст =
	"
	|ВЫБРАТЬ
	|	РА_ПодсистемаРасчетаБонусовПартнеров_НачислениеБонусовПартнерамТаблицаДействующихБонусныхПрограмм.БонуснаяПрограмма КАК БонуснаяПрограмма
	|ПОМЕСТИТЬ ВТ_БонусныеПрограммы
	|ИЗ
	|	Документ.РА_ПодсистемаРасчетаБонусовПартнеров_НачислениеБонусовПартнерам.ТаблицаДействующихБонусныхПрограмм КАК РА_ПодсистемаРасчетаБонусовПартнеров_НачислениеБонусовПартнерамТаблицаДействующихБонусныхПрограмм
	|ГДЕ
	|	РА_ПодсистемаРасчетаБонусовПартнеров_НачислениеБонусовПартнерамТаблицаДействующихБонусныхПрограмм.Ссылка = &СсылкаНаДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	РА_ПодсистемаРасчетаБонусовПартнеров_НачислениеБонусовПартнерамТаблицаДействующихБонусныхПрограмм.БонуснаяПрограмма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Производитель КАК Производитель
	|ИЗ
	|	(ВЫБРАТЬ
	|		РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммыПроизводители.Производитель.Наименование КАК Производитель
	|	ИЗ
	|		Справочник.РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммы.Производители КАК РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммыПроизводители
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_БонусныеПрограммы КАК ВТ_БонусныеПрограммы
	|			ПО РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммыПроизводители.Ссылка = ВТ_БонусныеПрограммы.БонуснаяПрограмма
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммыДополнительнаяНоменклатура.Номенклатура.Производитель
	|	ИЗ
	|		Справочник.РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммы.ДополнительнаяНоменклатура КАК РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммыДополнительнаяНоменклатура
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_БонусныеПрограммы КАК ВТ_БонусныеПрограммы
	|			ПО РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммыДополнительнаяНоменклатура.Ссылка = ВТ_БонусныеПрограммы.БонуснаяПрограмма
	|) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Производитель
	|";

	Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаДокумент);

	МассивПроизводителей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Производитель");

	ПервыйПроход = Истина;

	СтрокаПроизводитель = "";

	Для Каждого Производитель Из МассивПроизводителей Цикл
		СтрокаПроизводитель = СтрокаПроизводитель + ?(ПервыйПроход, "", ",") + Производитель;
	КонецЦикла;

	Возврат СтрокаПроизводитель;

КонецФункции

#КонецОбласти	

#КонецЕсли 
