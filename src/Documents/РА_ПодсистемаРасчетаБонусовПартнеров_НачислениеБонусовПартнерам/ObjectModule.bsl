#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНовый() Тогда
		Ответственный = Пользователи.АвторизованныйПользователь();
	КонецЕсли;

	Для Каждого СтрокаБонуснойПрограммы Из ТаблицаДействующихБонусныхПрограмм Цикл

		РеквизитыБонуснойПрограммы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтрокаБонуснойПрограммы.БонуснаяПрограмма, "ДатаПриложенияКДоговору, НомерПриложенияКДоговору");

		Если Не ЗначениеЗаполнено(НомерПриложенияКДоговору) Тогда
			НомерПриложенияКДоговору = РеквизитыБонуснойПрограммы.НомерПриложенияКДоговору;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ДатаПриложенияКДоговору) Тогда
			ДатаПриложенияКДоговору = РеквизитыБонуснойПрограммы.ДатаПриложенияКДоговору;
		КонецЕсли;

		Прервать;

	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Движения.РА_ПодсистемаРасчетаБонусовПартнеров_БонусыПартнерам.Записывать = Истина;
	Движения.РА_ПодсистемаРасчетаБонусовПартнеров_БонусыПартнерам.Очистить();

	Блокировка = Новый БлокировкаДанных;

	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РА_ПодсистемаРасчетаБонусовПартнеров_БонусыПартнерам");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

	ЭлементБлокировки.ИсточникДанных = НачисленияАвтоматическийРасчет;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("БонуснаяПрограмма",
		"БонуснаяПрограмма");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипПремии", "ТипПремии");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("АналитикаНастройкиПремий", "АналитикаНастройкиПремий");

	Блокировка.Заблокировать();

	КонецПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПериодДействия, "КонецПериода");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РА_БонусыПартнерамОстатки.БонуснаяПрограмма КАК БонуснаяПрограмма,
	|	РА_БонусыПартнерамОстатки.ТипПремии КАК ТипПремии,
	|	РА_БонусыПартнерамОстатки.Номенклатура КАК Номенклатура,
	|	РА_БонусыПартнерамОстатки.СуммаОстаток КАК Сумма,
	|	РА_БонусыПартнерамОстатки.СуммаВыручкиОстаток КАК СуммаВыручки,
	|	РА_БонусыПартнерамОстатки.АналитикаНастройкиПремий,
	|	РА_БонусыПартнерамОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.РА_ПодсистемаРасчетаБонусовПартнеров_БонусыПартнерам.Остатки(&Период, БонуснаяПрограмма В
	|		(&БонуснаяПрограмма)
	|	И ТипПремии В (&ТипПремии)) КАК РА_БонусыПартнерамОстатки";

	Запрос.УстановитьПараметр("БонуснаяПрограмма", НачисленияАвтоматическийРасчет.ВыгрузитьКолонку(
		"БонуснаяПрограмма"));
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецПериода, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ТипПремии", НачисленияАвтоматическийРасчет.ВыгрузитьКолонку("ТипПремии"));

	ТаблицаОстатковБонусов = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаТаблицы Из ТаблицаОстатковБонусов Цикл

		Движение = Движения.РА_ПодсистемаРасчетаБонусовПартнеров_БонусыПартнерам.ДобавитьРасход();
		Движение.Активность = Истина;
		Движение.Период = КонецДня(КонецПериода);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);

	КонецЦикла;
	
	//Добавим движения по ручному вводу премий
	
	Для Каждого СтрокаТаблицы Из НачисленияРучнойРасчет Цикл

		Движение = Движения.РА_ПодсистемаРасчетаБонусовПартнеров_БонусыПартнерам.ДобавитьПриход();
		Движение.Активность = Истина;
		Движение.Период = КонецДня(КонецПериода);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		Движение.Сумма = СтрокаТаблицы.Сумма;
		
		Движение = Движения.РА_ПодсистемаРасчетаБонусовПартнеров_БонусыПартнерам.ДобавитьРасход();
		Движение.Активность = Истина;
		Движение.Период = КонецДня(КонецПериода);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		Движение.Сумма = СтрокаТаблицы.Сумма;

	КонецЦикла;

	Движения.РА_ПодсистемаРасчетаБонусовПартнеров_БонусыПартнерам.Записать();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если Не ПометкаУдаления Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РА_НачислениеБонусовПартнерам.Договор КАК Договор,
		|	РА_НачислениеБонусовПартнерам.Партнер КАК Партнер,
		|	РА_НачислениеБонусовПартнерам.ПериодДействия КАК ПериодДействия
		|ИЗ
		|	Документ.РА_ПодсистемаРасчетаБонусовПартнеров_НачислениеБонусовПартнерам КАК РА_НачислениеБонусовПартнерам
		|ГДЕ
		|	РА_НачислениеБонусовПартнерам.Ссылка <> &Ссылка
		|	И НЕ РА_НачислениеБонусовПартнерам.ПометкаУдаления
		|	И РА_НачислениеБонусовПартнерам.Договор = &Договор
		|	И РА_НачислениеБонусовПартнерам.Партнер = &Партнер";

		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Договор", Договор);
		Запрос.УстановитьПараметр("Партнер", Партнер);

		РезультатЗапроса = Запрос.Выполнить();

		Если Не РезультатЗапроса.Пустой() Тогда
			ОбщегоНазначения.СообщитьПользователю(
				"С такими параметрами уже созданы документы ""Начисления бонусов по партнерам""! Запись невозможна!", ,
				, , Отказ);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполнить автоматический расчет.
Процедура ЗаполнитьАвтоматическийРасчет() Экспорт

	НачисленияАвтоматическийРасчет.Очистить();

	ТаблицаОборотовПоДоговоруЗаПериод = ПолучитьТаблицуОборотовПоДоговору(Партнер, Договор, ПериодДействия);

	МассивБонусныхПрограмм = ТаблицаДействующихБонусныхПрограмм.ВыгрузитьКолонку("БонуснаяПрограмма");

	Для Каждого БонуснаяПрограмма Из МассивБонусныхПрограмм Цикл
		//@skip-check query-in-loop
		ОбработатьБонуснуюПрограмму(БонуснаяПрограмма, ТаблицаОборотовПоДоговоруЗаПериод.Скопировать());
	КонецЦикла;

	ПересчитатьИтоговыеСуммы();

КонецПроцедуры

// Получить доступные бонусные программы.
Процедура ПолучитьДоступныеБонусныеПрограммы() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РА_НастройкиНачисленияБонусовПартнерам.Ссылка КАК БонуснаяПрограмма
	|ИЗ
	|	Справочник.РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммы КАК РА_НастройкиНачисленияБонусовПартнерам
	|ГДЕ
	|	РА_НастройкиНачисленияБонусовПартнерам.Владелец = &ОбъектНастройки
	|	И НЕ РА_НастройкиНачисленияБонусовПартнерам.ПометкаУдаления";

	Запрос.УстановитьПараметр("ОбъектНастройки", ?(Договор.Пустая(), Партнер, Договор));

	Если ЗначениеЗаполнено(ПериодДействия) Тогда
		Запрос.Текст = Запрос.Текст + " И РА_НастройкиНачисленияБонусовПартнерам.ПериодДействия = &ПериодДействия";
		Запрос.УстановитьПараметр("ПериодДействия", ПериодДействия);
	КонецЕсли;

	ТаблицаДействующихБонусныхПрограмм.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры	

// Обработать бонусную программу.
// 
// Параметры:
//  БонуснаяПрограмма - СправочникСсылка.РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммы - Бонусная программа
//  ТаблицаОборотовПоДоговоруЗаПериод - ТаблицаЗначений - Таблица оборотов по договору за период
Процедура ОбработатьБонуснуюПрограмму(БонуснаяПрограмма, ТаблицаОборотовПоДоговоруЗаПериод)

	//Проверим есть ли в бонусной программе план и в каких он единицах

	ТаблицаНачисленийПоБонуснойПрограмме = ИнициализироватьТаблицуНачисленийБонусов(БонуснаяПрограмма);

	ПодготовитьТаблицуОборотовОтНастройкиБонуснойПрограммы(БонуснаяПрограмма, ТаблицаОборотовПоДоговоруЗаПериод);

	РеквизитыБонуснойПрограммы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БонуснаяПрограмма,
		"ПроцентПремииЗаПланЗакупок, ПроцентПремииЗаШоуРум, ПроцентПремииЗаСложныйПродукт, ПроцентПремииЗаПредоплату, ПроцентПремииЗаСтатистическиеДанные");

	Если РеквизитыБонуснойПрограммы.ПроцентПремииЗаПланЗакупок <> 0 Тогда
		ОбработатьНачислениеБонусовЗависящихОтПлана(ТаблицаНачисленийПоБонуснойПрограмме,
			ТаблицаОборотовПоДоговоруЗаПериод, БонуснаяПрограмма);
	КонецЕсли;

	Если РеквизитыБонуснойПрограммы.ПроцентПремииЗаШоуРум <> 0 Тогда
		ОбработатьНачислениеБонусовЗаШоуРум(ТаблицаНачисленийПоБонуснойПрограмме, БонуснаяПрограмма);
	КонецЕсли;

	Если РеквизитыБонуснойПрограммы.ПроцентПремииЗаСложныйПродукт <> 0 Тогда
		ОбработатьНачислениеБонусовЗаСложныйПродукт(ТаблицаНачисленийПоБонуснойПрограмме, БонуснаяПрограмма);
	КонецЕсли;

	Если РеквизитыБонуснойПрограммы.ПроцентПремииЗаПредоплату <> 0 Тогда
		ОбработатьНачислениеБонусовЗаПредоплату(ТаблицаНачисленийПоБонуснойПрограмме, БонуснаяПрограмма);
	КонецЕсли;
	
	Если РеквизитыБонуснойПрограммы.ПроцентПремииЗаСтатистическиеДанные <> 0 Тогда
		ОбработатьНачислениеБонусовЗаСтатистическиеДанные(ТаблицаНачисленийПоБонуснойПрограмме, БонуснаяПрограмма);
	КонецЕсли;
	
	ОбработатьНачислениеБонусовЗаФорматОтгрузки(ТаблицаНачисленийПоБонуснойПрограмме, БонуснаяПрограмма);

	ОбработатьНачислениеБонусовПоВидамОборудования(ТаблицаНачисленийПоБонуснойПрограмме, БонуснаяПрограмма);
	
КонецПроцедуры

// Пересчитать итоговые суммы.
Процедура ПересчитатьИтоговыеСуммы()
	СуммаБонусовИтого = НачисленияАвтоматическийРасчет.Итог("Сумма") + НачисленияРучнойРасчет.Итог("Сумма");
КонецПроцедуры

// Подготовить таблицу оборотов от настройки бонусной программы.
// 
// Параметры:
//  БонуснаяПрограмма - СправочникСсылка.РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммы, Произвольный - Бонусная программа
//  ТаблицаОборотовПоДоговоруЗаПериод - ТаблицаЗначений - Таблица оборотов по договору за период
Процедура ПодготовитьТаблицуОборотовОтНастройкиБонуснойПрограммы(БонуснаяПрограмма, ТаблицаОборотовПоДоговоруЗаПериод)

	МассивПодходящейНоменклатуры = РА_ПодсистемаРасчетаБонусовПартнеров_РасчетБонусовСервер.ПолучитьМассивНоменклатурыДляРасчетаБонусов(
		БонуснаяПрограмма);

	РеквизитыБонуснойПрограммы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БонуснаяПрограмма,
		"ТипПоказателяПлана, Валюта");

	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	МассивСтрокКУдалению = Новый Массив;

	Для Каждого СтрокаТаблицы Из ТаблицаОборотовПоДоговоруЗаПериод Цикл
		Если МассивПодходящейНоменклатуры.Найти(СтрокаТаблицы.Номенклатура) = Неопределено Тогда
			МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		ТаблицаОборотовПоДоговоруЗаПериод.Удалить(СтрокаКУдалению);
	КонецЦикла;

	Если РеквизитыБонуснойПрограммы.ТипПоказателяПлана = ПредопределенноеЗначение(
		"Перечисление.РА_ТипыПоказателяПлана.Сумма") Тогда
		ТаблицаОборотовПоДоговоруЗаПериод.Колонки.Добавить("СуммаВыручкиВВалютеПлана",
			ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

		Для Каждого СтрокаТаблицы Из ТаблицаОборотовПоДоговоруЗаПериод Цикл

			СтрокаТаблицы.СуммаВыручкиВВалютеПлана = РаботаСКурсамиВалют.ПересчитатьВВалюту(
						СтрокаТаблицы.СуммаВыручкиВРублях, ВалютаРеглУчета, РеквизитыБонуснойПрограммы.Валюта,
				СтрокаТаблицы.Период);

		КонецЦикла;

	КонецЕсли;

	ТаблицаОборотовПоДоговоруЗаПериод.Колонки.Удалить("Период");

	Если РеквизитыБонуснойПрограммы.ТипПоказателяПлана = ПредопределенноеЗначение(
		"Перечисление.РА_ТипыПоказателяПлана.Сумма") Тогда
		ТаблицаОборотовПоДоговоруЗаПериод.Свернуть( , "Количество, СуммаВыручкиВВалютеПлана, СуммаВыручкиВРублях");
	Иначе
		ТаблицаОборотовПоДоговоруЗаПериод.Свернуть( , "Количество, СуммаВыручкиВРублях");
	КонецЕсли;

КонецПроцедуры

// Обработать начисление бонусов зависящих от плана.
// 
// Параметры:
//  ТаблицаНачисленийПоБонуснойПрограмме - ТаблицаЗначений - Таблица начислений по бонусной программе
//  ТаблицаОборотовПоДоговоруЗаПериод - ТаблицаЗначений - Таблица оборотов по договору за период
//  БонуснаяПрограмма - Произвольный, СправочникСсылка.РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммы - Бонусная программа
Процедура ОбработатьНачислениеБонусовЗависящихОтПлана(ТаблицаНачисленийПоБонуснойПрограмме,
	ТаблицаОборотовПоДоговоруЗаПериод, БонуснаяПрограмма)

	РеквизитыБонуснойПрограммы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БонуснаяПрограмма,
		"ТипПоказателяПлана, ПроцентПремииЗаПланЗакупок");

	Если РеквизитыБонуснойПрограммы.ТипПоказателяПлана = ПредопределенноеЗначение(
		"Перечисление.РА_ТипыПоказателяПлана.НетПлана") Тогда
		Возврат;
	КонецЕсли;

	СтрокаНачисления = НачисленияАвтоматическийРасчет.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНачисления, БонуснаяПрограмма);

	СтрокаНачисления.ТипПремии = ПредопределенноеЗначение("Перечисление.РА_ТипыПремийПартнерам.ПремияЗаВыполнениеПлана");

	Если РеквизитыБонуснойПрограммы.ТипПоказателяПлана = ПредопределенноеЗначение(
		"Перечисление.РА_ТипыПоказателяПлана.Сумма") Тогда
		РеквизитВыборки = "СуммаВыручкиВВалютеПлана";
	Иначе
		РеквизитВыборки = "Количество";
	КонецЕсли;

	Если ТаблицаОборотовПоДоговоруЗаПериод.Количество() Тогда
		СтрокаНачисления.ПоказательЗакупки = ТаблицаОборотовПоДоговоруЗаПериод[0][РеквизитВыборки];
	КонецЕсли;

	СтрокаНачисления.ПроцентВыполненияПлана = ?(СтрокаНачисления.ПоказательПлана = 0, 0, Окр(
		СтрокаНачисления.ПоказательЗакупки / СтрокаНачисления.ПоказательПлана * 100, 2, РежимОкругления.Окр15как10));

	Если СтрокаНачисления.ПроцентВыполненияПлана >= 100 Тогда

		НачисленияПоТипуПремии = ТаблицаНачисленийПоБонуснойПрограмме.НайтиСтроки(Новый Структура("ТипПремии",
			СтрокаНачисления.ТипПремии));

		Если НачисленияПоТипуПремии.Количество() Тогда
			СтрокаНачисления.Сумма = НачисленияПоТипуПремии[0].СуммаБонуса;
			СтрокаНачисления.БонусируемыйОборот = НачисленияПоТипуПремии[0].БонусируемыйОборот;
		КонецЕсли;

	КонецЕсли;

	СтрокаНачисления.БонуснаяПрограмма = БонуснаяПрограмма;

	СтрокаНачисления.СтавкаНДС = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтавкиНДС.БезНДС");

	СтрокаНачисления.ПроцентПремии = РеквизитыБонуснойПрограммы.ПроцентПремииЗаПланЗакупок;

КонецПроцедуры	

// Обработать начисление бонусов за шоу рум.
// 
// Параметры:
//  ТаблицаНачисленийПоБонуснойПрограмме - ТаблицаЗначений - Таблица начислений по бонусной программе
//  БонуснаяПрограмма - СправочникСсылка.РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммы - Бонусная программа
Процедура ОбработатьНачислениеБонусовЗаШоуРум(ТаблицаНачисленийПоБонуснойПрограмме, БонуснаяПрограмма)

	СтрокаНачисления = НачисленияАвтоматическийРасчет.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНачисления, БонуснаяПрограмма, , "ПоказательПлана");

	СтрокаНачисления.ТипПремии = ПредопределенноеЗначение("Перечисление.РА_ТипыПремийПартнерам.ПремияЗаНаличиеШоуРума");
	НачисленияПоТипуПремии = ТаблицаНачисленийПоБонуснойПрограмме.НайтиСтроки(Новый Структура("ТипПремии",
		СтрокаНачисления.ТипПремии));

	Если НачисленияПоТипуПремии.Количество() Тогда
		СтрокаНачисления.Сумма = НачисленияПоТипуПремии[0].СуммаБонуса;
		СтрокаНачисления.БонусируемыйОборот = НачисленияПоТипуПремии[0].БонусируемыйОборот;
	КонецЕсли;

	СтрокаНачисления.БонуснаяПрограмма = БонуснаяПрограмма;

	СтрокаНачисления.ПроцентПремии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БонуснаяПрограмма,
		"ПроцентПремииЗаШоуРум");

	СтрокаНачисления.СтавкаНДС = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтавкиНДС.БезНДС");
	
КонецПроцедуры

// Обработать начисление бонусов за сложный продукт.
// 
// Параметры:
//  ТаблицаНачисленийПоБонуснойПрограмме - ТаблицаЗначений - Таблица начислений по бонусной программе
//  БонуснаяПрограмма - СправочникСсылка.РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммы - Бонусная программа
Процедура ОбработатьНачислениеБонусовЗаСложныйПродукт(ТаблицаНачисленийПоБонуснойПрограмме, БонуснаяПрограмма)

	СтрокаНачисления = НачисленияАвтоматическийРасчет.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНачисления, БонуснаяПрограмма, , "ПоказательПлана");

	СтрокаНачисления.ТипПремии = ПредопределенноеЗначение("Перечисление.РА_ТипыПремийПартнерам.ПремияЗаСложныйПродукт");

	НачисленияПоТипуПремии = ТаблицаНачисленийПоБонуснойПрограмме.НайтиСтроки(Новый Структура("ТипПремии",
		СтрокаНачисления.ТипПремии));

	Если НачисленияПоТипуПремии.Количество() Тогда
		СтрокаНачисления.Сумма = НачисленияПоТипуПремии[0].СуммаБонуса;
		СтрокаНачисления.БонусируемыйОборот = НачисленияПоТипуПремии[0].БонусируемыйОборот;
	КонецЕсли;

	СтрокаНачисления.БонуснаяПрограмма = БонуснаяПрограмма;

	СтрокаНачисления.ПроцентПремии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БонуснаяПрограмма,
		"ПроцентПремииЗаСложныйПродукт");
	
	СтрокаНачисления.СтавкаНДС = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтавкиНДС.БезНДС");

КонецПроцедуры

// Обработать начисление бонусов за предоплату.
// 
// Параметры:
//  ТаблицаНачисленийПоБонуснойПрограмме - ТаблицаЗначений - Таблица начислений по бонусной программе
//  БонуснаяПрограмма - СправочникСсылка.РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммы, Произвольный - Бонусная программа
Процедура ОбработатьНачислениеБонусовЗаПредоплату(ТаблицаНачисленийПоБонуснойПрограмме, БонуснаяПрограмма)

	СтрокаНачисления = НачисленияАвтоматическийРасчет.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНачисления, БонуснаяПрограмма, , "ПоказательПлана");

	СтрокаНачисления.ТипПремии = ПредопределенноеЗначение("Перечисление.РА_ТипыПремийПартнерам.ПремияЗаПредоплату");

	НачисленияПоТипуПремии = ТаблицаНачисленийПоБонуснойПрограмме.НайтиСтроки(Новый Структура("ТипПремии",
		СтрокаНачисления.ТипПремии));

	Если НачисленияПоТипуПремии.Количество() Тогда
		СтрокаНачисления.Сумма = НачисленияПоТипуПремии[0].СуммаБонуса;
		СтрокаНачисления.БонусируемыйОборот = НачисленияПоТипуПремии[0].БонусируемыйОборот;
	КонецЕсли;

	СтрокаНачисления.БонуснаяПрограмма = БонуснаяПрограмма;

	СтрокаНачисления.ПроцентПремии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БонуснаяПрограмма,
		"ПроцентПремииЗаПредоплату");

	СтрокаНачисления.СтавкаНДС = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтавкиНДС.БезНДС");

КонецПроцедуры

// Обработать начисление бонусов за статистические данные.
// 
// Параметры:
//  ТаблицаНачисленийПоБонуснойПрограмме - ТаблицаЗначений - Таблица начислений по бонусной программе
//  БонуснаяПрограмма - СправочникСсылка.РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммы, Произвольный - Бонусная программа
Процедура ОбработатьНачислениеБонусовЗаСтатистическиеДанные(ТаблицаНачисленийПоБонуснойПрограмме, БонуснаяПрограмма)

СтрокаНачисления = НачисленияАвтоматическийРасчет.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНачисления, БонуснаяПрограмма, , "ПоказательПлана");

	СтрокаНачисления.ТипПремии = ПредопределенноеЗначение("Перечисление.РА_ТипыПремийПартнерам.ПремияЗаПредоставлениеСтатистическихДанных");

	НачисленияПоТипуПремии = ТаблицаНачисленийПоБонуснойПрограмме.НайтиСтроки(Новый Структура("ТипПремии",
		СтрокаНачисления.ТипПремии));

	Если НачисленияПоТипуПремии.Количество() Тогда
		Если ПредоставленыСтатДанные Тогда
			СтрокаНачисления.Сумма = НачисленияПоТипуПремии[0].СуммаБонуса;
			СтрокаНачисления.СуммаНДС = НачисленияПоТипуПремии[0].СуммаБонуса * 0.2;
		КонецЕсли;
		СтрокаНачисления.БонусируемыйОборот = НачисленияПоТипуПремии[0].БонусируемыйОборот;
	КонецЕсли;

	СтрокаНачисления.БонуснаяПрограмма = БонуснаяПрограмма;

	СтрокаНачисления.ПроцентПремии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БонуснаяПрограмма,
		"ПроцентПремииЗаСтатистическиеДанные");
		
	СтрокаНачисления.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("Ставка", 20);
КонецПроцедуры

// Обработать начисление бонусов за формат отгрузки.
// 
// Параметры:
//  ТаблицаНачисленийПоБонуснойПрограмме - ТаблицаЗначений - Таблица начислений по бонусной программе
//  БонуснаяПрограмма - СправочникСсылка.РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммы, Произвольный - Бонусная программа
Процедура ОбработатьНачислениеБонусовЗаФорматОтгрузки(ТаблицаНачисленийПоБонуснойПрограмме, БонуснаяПрограмма)

	ТипПремии = ПредопределенноеЗначение(
		"Перечисление.РА_ТипыПремийПартнерам.ПремияЗаФорматОтгрузки");

	НастройкиПоФорматамОтгрузки  = ПолучитьТаблицуФорматовОтгрузкиПоБонуснойПрограмме(БонуснаяПрограмма);

	Для Каждого ЭлементНастройки Из НастройкиПоФорматамОтгрузки Цикл

		СтрокаНачисления = НачисленияАвтоматическийРасчет.Добавить();

		СтрокаНачисления.БонуснаяПрограмма = БонуснаяПрограмма;

		СтрокаНачисления.ТипПремии = ТипПремии;
		СтрокаНачисления.АналитикаНастройкиПремий = ЭлементНастройки.ФорматОтгрузки;
		СтрокаНачисления.ПроцентПремии = ЭлементНастройки.ПроцентПремии;

		СтруктураПоискаПоФорматуОтгрузки = Новый Структура;
		СтруктураПоискаПоФорматуОтгрузки.Вставить("ТипПремии", ТипПремии);
		СтруктураПоискаПоФорматуОтгрузки.Вставить("АналитикаНастройкиПремий", ЭлементНастройки.ФорматОтгрузки);

		НачисленияПоФорматуОтгрузки = ТаблицаНачисленийПоБонуснойПрограмме.НайтиСтроки(СтруктураПоискаПоФорматуОтгрузки);

		Если НачисленияПоФорматуОтгрузки.Количество() Тогда
			СтрокаНачисления.Сумма = НачисленияПоФорматуОтгрузки[0].СуммаБонуса;
			СтрокаНачисления.БонусируемыйОборот = НачисленияПоФорматуОтгрузки[0].БонусируемыйОборот;
		КонецЕсли;
		
		СтрокаНачисления.СтавкаНДС = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтавкиНДС.БезНДС");

	КонецЦикла;

КонецПроцедуры

// Обработать начисление бонусов по видам оборудования.
// 
// Параметры:
//  ТаблицаНачисленийПоБонуснойПрограмме - ТаблицаЗначений - Таблица начислений по бонусной программе
// БонуснаяПрограмма - СправочникСсылка.РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммы, Произвольный - Бонусная программа
Процедура ОбработатьНачислениеБонусовПоВидамОборудования(ТаблицаНачисленийПоБонуснойПрограмме, БонуснаяПрограмма)

	ТипПремии = ПредопределенноеЗначение(
		"Перечисление.РА_ТипыПремийПартнерам.ПремияЗаВыполнениеПланаПоВидамОборудования");

	НастройкиПоВидамОборудования  = РА_ПодсистемаРасчетаБонусовПартнеров_РасчетБонусовСервер.ПолучитьТаблицуПремийПоВидамОборудованияПоБонуснойПрограмме(
		БонуснаяПрограмма);

	Для Каждого ЭлементНастройки Из НастройкиПоВидамОборудования Цикл

		СтрокаНачисления = НачисленияАвтоматическийРасчет.Добавить();

		СтрокаНачисления.БонуснаяПрограмма = БонуснаяПрограмма;

		СтрокаНачисления.ТипПремии = ТипПремии;
		СтрокаНачисления.АналитикаНастройкиПремий = ЭлементНастройки.ВидОборудования;
		СтрокаНачисления.ПроцентПремии = ЭлементНастройки.ПроцентПремии;

		СтруктураПоискаПоФорматуОтгрузки = Новый Структура;
		СтруктураПоискаПоФорматуОтгрузки.Вставить("ТипПремии", ТипПремии);
		СтруктураПоискаПоФорматуОтгрузки.Вставить("АналитикаНастройкиПремий", ЭлементНастройки.ВидОборудования);

		НачисленияПоФорматуОтгрузки = ТаблицаНачисленийПоБонуснойПрограмме.НайтиСтроки(СтруктураПоискаПоФорматуОтгрузки);

		Если НачисленияПоФорматуОтгрузки.Количество() Тогда

			Если НачисленияПоФорматуОтгрузки[0].КоличествоПродано >= ЭлементНастройки.Количество Тогда
				СтрокаНачисления.Сумма = НачисленияПоФорматуОтгрузки[0].СуммаБонуса;
			КонецЕсли;

			СтрокаНачисления.ПоказательЗакупки = НачисленияПоФорматуОтгрузки[0].КоличествоПродано;
			СтрокаНачисления.ПоказательПлана = ЭлементНастройки.Количество;

			СтрокаНачисления.ПроцентВыполненияПлана = ?(СтрокаНачисления.ПоказательПлана = 0, 0, Окр(
				СтрокаНачисления.ПоказательЗакупки / СтрокаНачисления.ПоказательПлана * 100, 2,
				РежимОкругления.Окр15как10));

			СтрокаНачисления.БонусируемыйОборот = НачисленияПоФорматуОтгрузки[0].БонусируемыйОборот;
					
		КонецЕсли;
		
		СтрокаНачисления.СтавкаНДС = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтавкиНДС.БезНДС");

	КонецЦикла;

КонецПроцедуры

// Получить таблицу оборотов по договору.
// 
// Параметры:
//  Партнер - СправочникСсылка.Партнеры - Партнер
//  Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор
//  ПериодДействия - СправочникСсылка.РА_ПодсистемаРасчетаБонусовПартнеров_ПериодыДействияБонуса - Период действия
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Получить таблицу оборотов по договору
Функция ПолучитьТаблицуОборотовПоДоговору(Партнер, Договор, ПериодДействия)

	Если ЗначениеЗаполнено(Договор) Тогда
		МассивДоговоров = ПолучитьМассивДоговоровДляОтбораВыручки(Договор);
	КонецЕсли;

	Запрос = Новый Запрос;

	Если ЗначениеЗаполнено(Договор) Тогда

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК Количество,
		|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиРеглОборот КАК СуммаВыручкиВРублях,
		|	ЕСТЬNULL(ВыручкаИСебестоимостьПродажОбороты.ЗаказКлиента.Дата, ВыручкаИСебестоимостьПродажОбороты.Период) КАК Период
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			День,
		|			АналитикаУчетаПоПартнерам.Договор В (&Договор)
		|				И АналитикаУчетаНоменклатуры.Номенклатура.РА_ВходитВПланЗакупок_Бонусы) КАК ВыручкаИСебестоимостьПродажОбороты
		|";

		Запрос.УстановитьПараметр("Договор", МассивДоговоров);

	Иначе

		Запрос.Текст =
		"ВЫБРАТЬ
		|	РА_НастройкиНачисленияБонусовПартнерам.Владелец КАК Договор
		|ПОМЕСТИТЬ ВТ_ОтборДоговор
		|ИЗ
		|	Справочник.РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммы КАК РА_НастройкиНачисленияБонусовПартнерам
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(РА_НастройкиНачисленияБонусовПартнерам.Владелец) = ТИП(Справочник.ДоговорыКонтрагентов)
		|	И РА_НастройкиНачисленияБонусовПартнерам.Владелец <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|	И РА_НастройкиНачисленияБонусовПартнерам.ПериодДействия = &ПериодДействия
		|	И РА_НастройкиНачисленияБонусовПартнерам.Партнер = &Партнер
		|СГРУППИРОВАТЬ ПО
		|	РА_НастройкиНачисленияБонусовПартнерам.Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ПодчиненныеДоговоры
		|ИЗ
		|	ВТ_ОтборДоговор КАК ВТ_ОтборДоговор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ДоговорыКонтрагентов.РА_ПодсистемаРасчетаБонусовПартнеров_ОсновнойДоговор = ВТ_ОтборДоговор.Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсключаемыеДоговоры.Договор КАК Договор
		|ПОМЕСТИТЬ ВТ_ИсключаемыеДоговоры
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ОтборДоговор.Договор КАК Договор
		|	ИЗ
		|		ВТ_ОтборДоговор КАК ВТ_ОтборДоговор
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ВТ_ОтборДоговор.Договор.РА_ПодсистемаРасчетаБонусовПартнеров_ОсновнойДоговор
		|	ИЗ
		|		ВТ_ОтборДоговор КАК ВТ_ОтборДоговор
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ВТ_ПодчиненныеДоговоры.Ссылка
		|	ИЗ
		|		ВТ_ПодчиненныеДоговоры КАК ВТ_ПодчиненныеДоговоры) КАК ИсключаемыеДоговоры
		|ГДЕ
		|	ИсключаемыеДоговоры.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ИсключаемыеДоговоры.Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК Количество,
		|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура.РА_ПодсистемаРасчетаБонусовПартнеров_ВидОборудованияДляНачисленияБонусов КАК
		|		ВидОборудованияДляНачисленияБонусов,
		|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиРеглОборот КАК СуммаВыручкиВРублях,
		|	ЕСТЬNULL(ВыручкаИСебестоимостьПродажОбороты.ЗаказКлиента.Дата, ВыручкаИСебестоимостьПродажОбороты.Период) КАК Период
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, &КонецПериода, День,
		|	НЕ АналитикаУчетаПоПартнерам.Договор В
		|		(ВЫБРАТЬ
		|			ВТ_ИсключаемыеДоговоры.Договор
		|		ИЗ
		|			ВТ_ИсключаемыеДоговоры КАК ВТ_ИсключаемыеДоговоры)
		|	И АналитикаУчетаНоменклатуры.Номенклатура.РА_ВходитВПланЗакупок_Бонусы) КАК ВыручкаИСебестоимостьПродажОбороты";

		Запрос.УстановитьПараметр("Партнер", Партнер);
		Запрос.УстановитьПараметр("ПериодДействия", ПериодДействия);

	КонецЕсли;

	РеквизитыПериодаДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПериодДействия, "НачалоПериода, КонецПериода");

	Запрос.УстановитьПараметр("НачалоПериода", РеквизитыПериодаДействия.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(РеквизитыПериодаДействия.КонецПериода));

	ТаблицаОборотовПоДоговоруЗаПериод = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаОборотовПоДоговоруЗаПериод;

КонецФункции

// Получить массив договоров для отбора выручки.
// 
// Параметры:
//  Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ДоговорыКонтрагентов - Получить массив договоров для отбора выручки
Функция ПолучитьМассивДоговоровДляОтбораВыручки(Договор)

	МассивДоговоров = Новый Массив;
	МассивДоговоров.Добавить(Договор);

	ОсновнойДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор,
		"РА_ПодсистемаРасчетаБонусовПартнеров_ОсновнойДоговор");

	Если ЗначениеЗаполнено(ОсновнойДоговор) Тогда
		МассивДоговоров.Добавить(ОсновнойДоговор);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.РА_ПодсистемаРасчетаБонусовПартнеров_ОсновнойДоговор = &Договор
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоговорыКонтрагентов.Ссылка";

	Запрос.УстановитьПараметр("Договор", Договор);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивДоговоров.Добавить(ВыборкаДетальныеЗаписи.Договор);
	КонецЦикла;

	МассивДоговоров = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивДоговоров);

	Возврат МассивДоговоров;

КонецФункции	

// Инициализировать таблицу начислений бонусов.
// 
// Параметры:
//  БонуснаяПрограмма - СправочникСсылка.РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммы - Бонусная программа
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Инициализировать таблицу начислений бонусов
Функция ИнициализироватьТаблицуНачисленийБонусов(БонуснаяПрограмма)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РА_БонусыПартнерамОстатки.ТипПремии КАК ТипПремии,
	|	РА_БонусыПартнерамОстатки.СуммаОстаток КАК СуммаБонуса,
	|	РА_БонусыПартнерамОстатки.СуммаВыручкиОстаток КАК БонусируемыйОборот,
	|	РА_БонусыПартнерамОстатки.АналитикаНастройкиПремий,
	|	РА_БонусыПартнерамОстатки.КоличествоОстаток КАК КоличествоПродано
	|ИЗ
	|	РегистрНакопления.РА_ПодсистемаРасчетаБонусовПартнеров_БонусыПартнерам.Остатки(&Период,
	|		БонуснаяПрограмма = &БонуснаяПрограмма) КАК РА_БонусыПартнерамОстатки";

	Запрос.УстановитьПараметр("БонуснаяПрограмма", БонуснаяПрограмма);
	Запрос.УстановитьПараметр("Период", Новый Граница(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БонуснаяПрограмма,
		"ПериодДействия.КонецПериода"), ВидГраницы.Исключая));

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Возврат РезультатЗапроса;

КонецФункции

// Получить таблицу форматов отгрузки по бонусной программе.
// 
// Параметры:
//  БонуснаяПрограмма - СправочникСсылка.РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммы, Произвольный - Бонусная программа
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Получить таблицу форматов отгрузки по бонусной программе
Функция ПолучитьТаблицуФорматовОтгрузкиПоБонуснойПрограмме(БонуснаяПрограмма)
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммыНастройкиПремийПоФорматамОтгрузки.ФорматОтгрузки,
		|	РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммыНастройкиПремийПоФорматамОтгрузки.ПроцентПремии
		|ИЗ
		|	Справочник.РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммы.НастройкиПремийПоФорматамОтгрузки КАК
		|		РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммыНастройкиПремийПоФорматамОтгрузки
		|ГДЕ
		|	РА_ПодсистемаРасчетаБонусовПартнеров_БонусныеПрограммыНастройкиПремийПоФорматамОтгрузки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", БонуснаяПрограмма);
	
	ТаблицаПоФорматамОтгрузки = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПоФорматамОтгрузки;

КонецФункции

#КонецОбласти

#КонецЕсли