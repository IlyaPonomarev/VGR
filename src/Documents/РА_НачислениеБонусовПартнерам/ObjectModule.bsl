
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Ответственный = Пользователи.АвторизованныйПользователь();
	КонецЕсли; 
	
	Для Каждого СтрокаБонуснойПрограммы Из ТаблицаДействующихБонусныхПрограмм Цикл
		
		Если Не ЗначениеЗаполнено(НомерПриложенияКДоговору) Тогда
			НомерПриложенияКДоговору = СтрокаБонуснойПрограммы.НомерПриложенияКДоговору;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаПриложенияКДоговору) Тогда
			ДатаПриложенияКДоговору = СтрокаБонуснойПрограммы.ДатаПриложенияКДоговору;
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;	
		    
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Движения.РА_БонусыПартнерам.Записывать = Истина;
	Движения.РА_БонусыПартнерам.Очистить();
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РА_БонусыПартнерам");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки.ИсточникДанных = НачисленияАвтоматическийРасчет;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("АналитикаУчетаБонуснойПрограммы", "АналитикаУчетаБонуснойПрограммы");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипПремии", "ТипПремии");
	
	Блокировка.Заблокировать(); 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РА_БонусыПартнерамОстатки.АналитикаУчетаБонуснойПрограммы КАК АналитикаУчетаБонуснойПрограммы,
		|	РА_БонусыПартнерамОстатки.ТипПремии КАК ТипПремии,
		|	РА_БонусыПартнерамОстатки.Номенклатура КАК Номенклатура,
		|	РА_БонусыПартнерамОстатки.СуммаОстаток КАК Сумма,
		|	РА_БонусыПартнерамОстатки.СуммаВыручкиОстаток КАК СуммаВыручки
		|ИЗ
		|	РегистрНакопления.РА_БонусыПартнерам.Остатки(
		|			&Период,
		|			АналитикаУчетаБонуснойПрограммы В (&АналитикаУчетаБонуснойПрограммы)
		|				И ТипПремии В (&ТипПремии)) КАК РА_БонусыПартнерамОстатки";
	
	Запрос.УстановитьПараметр("АналитикаУчетаБонуснойПрограммы", НачисленияАвтоматическийРасчет.ВыгрузитьКолонку("АналитикаУчетаБонуснойПрограммы"));
	Запрос.УстановитьПараметр("Период", Новый Граница(ПериодДействия.КонецПериода, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ТипПремии", НачисленияАвтоматическийРасчет.ВыгрузитьКолонку("ТипПремии"));
	
	ТаблицаОстатковБонусов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаОстатковБонусов Цикл
		
		Движение = Движения.РА_БонусыПартнерам.ДобавитьРасход();
		Движение.Активность = Истина;
		Движение.Период = КонецДня(ПериодДействия.КонецПериода);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		
	КонецЦикла;
	
	Движения.РА_БонусыПартнерам.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьАвтоматическийРасчет() Экспорт
	
	НачисленияАвтоматическийРасчет.Очистить();
	
	ТаблицаОборотовПоДоговоруЗаПериод = ПолучитьТаблицуОборотовПоДоговору(Партнер, Договор, ПериодДействия);
	
	Для Каждого БонуснаяПрограмма Из ТаблицаДействующихБонусныхПрограмм Цикл
		ОбработатьБонуснуюПрограмму(БонуснаяПрограмма, ТаблицаОборотовПоДоговоруЗаПериод.Скопировать());	
	КонецЦикла;
	
	ПересчитатьИтоговыеСуммы();
	
КонецПроцедуры  

Процедура ПолучитьДоступныеБонусныеПрограммы() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РА_НастройкиНачисленияБонусовПартнерам.ПериодДействия КАК ПериодДействия,
		|	РА_НастройкиНачисленияБонусовПартнерам.ТипПоказателяПлана КАК ТипПоказателяПлана,
		|	РА_НастройкиНачисленияБонусовПартнерам.Валюта КАК ВалютаПлана,
		|	РА_НастройкиНачисленияБонусовПартнерам.Производитель КАК Производитель,
		|	РА_НастройкиНачисленияБонусовПартнерам.ПоказательПлана КАК ПоказательПлана,
		|	РА_НастройкиНачисленияБонусовПартнерам.ПроцентПремииЗаПланЗакупок КАК ПроцентПремииЗаПланЗакупок,
		|	РА_НастройкиНачисленияБонусовПартнерам.ПроцентПремииЗаШоуРум КАК ПроцентПремииЗаШоуРум,
		|	РА_НастройкиНачисленияБонусовПартнерам.ПроцентПремииЗаСложныйПродукт КАК ПроцентПремииЗаСложныйПродукт,
		|	РА_НастройкиНачисленияБонусовПартнерам.УидНастройки КАК УидНастройкиБонуснойПрограммы,
		|	РА_НастройкиНачисленияБонусовПартнерам.НомерПриложенияКДоговору КАК НомерПриложенияКДоговору,
		|	РА_НастройкиНачисленияБонусовПартнерам.ДатаПриложенияКДоговору КАК ДатаПриложенияКДоговору
		|ИЗ
		|	РегистрСведений.РА_НастройкиНачисленияБонусовПартнерам КАК РА_НастройкиНачисленияБонусовПартнерам
		|ГДЕ
		|	РА_НастройкиНачисленияБонусовПартнерам.ОбъектНастройки = &ОбъектНастройки";
	
	Запрос.УстановитьПараметр("ОбъектНастройки", ?(Договор.Пустая(), Партнер, Договор));
	
	
	Если ЗначениеЗаполнено(ПериодДействия) Тогда
		Запрос.Текст = Запрос.Текст + " И РА_НастройкиНачисленияБонусовПартнерам.ПериодДействия = &ПериодДействия";
		Запрос.УстановитьПараметр("ПериодДействия", ПериодДействия);
	КонецЕсли;
	
	ТаблицаДействующихБонусныхПрограмм.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	

Процедура ОбработатьБонуснуюПрограмму(БонуснаяПрограмма, ТаблицаОборотовПоДоговоруЗаПериод)

	//Проверим есть ли в бонусной программе план и в каких он единицах
	
	ТаблицаНачисленийПоБонуснойПрограмме = ИнициализироватьТаблицуНачисленийБонусов(Партнер, Договор, ПериодДействия, БонуснаяПрограмма.УидНастройкиБонуснойПрограммы);
	
	ПодготовитьТаблицуОборотовОтНастройкиБонуснойПрограммы(БонуснаяПрограмма, ТаблицаОборотовПоДоговоруЗаПериод);
	
	Если БонуснаяПрограмма.ПроцентПремииЗаПланЗакупок <> 0 Тогда
		ОбработатьНачислениеБонусовЗависящихОтПлана(ТаблицаНачисленийПоБонуснойПрограмме, ТаблицаОборотовПоДоговоруЗаПериод, БонуснаяПрограмма);
	КонецЕсли;
	
	Если БонуснаяПрограмма.ПроцентПремииЗаШоуРум <> 0 Тогда
		ОбработатьНачислениеБонусовЗаШоуРум(ТаблицаНачисленийПоБонуснойПрограмме, БонуснаяПрограмма);	
	КонецЕсли;
	
	Если БонуснаяПрограмма.ПроцентПремииЗаСложныйПродукт <> 0 Тогда
		ОбработатьНачислениеБонусовЗаСложныйПродукт(ТаблицаНачисленийПоБонуснойПрограмме, БонуснаяПрограмма);	
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПересчитатьИтоговыеСуммы()
	СуммаБонусовИтого = НачисленияАвтоматическийРасчет.Итог("СуммаБонуса") + НачисленияРучнойРасчет.Итог("СуммаБонуса");	
КонецПроцедуры	

Процедура ПодготовитьТаблицуОборотовОтНастройкиБонуснойПрограммы(БонуснаяПрограмма, ТаблицаОборотовПоДоговоруЗаПериод)
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ЗначениеЗаполнено(БонуснаяПрограмма.Производитель) Тогда
		
		МассивСтрокКУдалению = Новый Массив;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОборотовПоДоговоруЗаПериод Цикл
			Если СтрокаТаблицы.Производитель <> БонуснаяПрограмма.Производитель Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);	
			КонецЕсли;	
		КонецЦикла;	
		
		Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
			ТаблицаОборотовПоДоговоруЗаПериод.Удалить(СтрокаКУдалению);	
		КонецЦикла;
		
	КонецЕсли;
	
	Если БонуснаяПрограмма.ТипПоказателяПлана = ПредопределенноеЗначение("Перечисление.РА_ТипыПоказателяПлана.Сумма") Тогда
		ТаблицаОборотовПоДоговоруЗаПериод.Колонки.Добавить("СуммаВыручкиВВалютеПлана", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));	
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОборотовПоДоговоруЗаПериод Цикл
		
		СтрокаТаблицы.СуммаВыручкиВВалютеПлана = РаботаСКурсамиВалют.ПересчитатьВВалюту(
						СтрокаТаблицы.СуммаВыручкиВРублях, ВалютаРеглУчета, БонуснаяПрограмма.ВалютаПлана, СтрокаТаблицы.Период);
		
	КонецЦикла;
					
	ТаблицаОборотовПоДоговоруЗаПериод.Колонки.Удалить("Производитель");
	ТаблицаОборотовПоДоговоруЗаПериод.Колонки.Удалить("Период");
	
	Если БонуснаяПрограмма.ТипПоказателяПлана = ПредопределенноеЗначение("Перечисление.РА_ТипыПоказателяПлана.Сумма") Тогда 
		ТаблицаОборотовПоДоговоруЗаПериод.Свернуть(,"Количество, СуммаВыручкиВВалютеПлана, СуммаВыручкиВРублях");
	Иначе
		ТаблицаОборотовПоДоговоруЗаПериод.Свернуть(,"Количество, СуммаВыручкиВРублях");
	КонецЕсли;

КонецПроцедуры	

Процедура ОбработатьНачислениеБонусовЗависящихОтПлана(ТаблицаНачисленийПоБонуснойПрограмме, ТаблицаОборотовПоДоговоруЗаПериод, БонуснаяПрограмма)
	
	Если БонуснаяПрограмма.ТипПоказателяПлана = ПредопределенноеЗначение("Перечисление.РА_ТипыПоказателяПлана.НетПлана") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНачисления = НачисленияАвтоматическийРасчет.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНачисления, БонуснаяПрограмма);
	
	СтрокаНачисления.ТипПремии = ПредопределенноеЗначение("Перечисление.РА_ТипыПремийПартнерам.ПремияЗаВыполнениеПлана");
	
	Если БонуснаяПрограмма.ТипПоказателяПлана = ПредопределенноеЗначение("Перечисление.РА_ТипыПоказателяПлана.Сумма") Тогда
		РеквизитВыборки = "СуммаВыручкиВВалютеПлана";
	Иначе
		РеквизитВыборки = "Количество";
	КонецЕсли;	
	
	Если ТаблицаОборотовПоДоговоруЗаПериод.Количество() Тогда
		СтрокаНачисления.ПоказательЗакупки = ТаблицаОборотовПоДоговоруЗаПериод[0][РеквизитВыборки];	
	КонецЕсли;
	
	СтрокаНачисления.ПроцентВыполненияПлана = ?(СтрокаНачисления.ПоказательПлана = 0,0,
									Окр(СтрокаНачисления.ПоказательЗакупки/СтрокаНачисления.ПоказательПлана*100,2,РежимОкругления.Окр15как10));
									
	Если СтрокаНачисления.ПроцентВыполненияПлана >= 100 Тогда
		
		НачисленияПоТипуПремии = ТаблицаНачисленийПоБонуснойПрограмме.НайтиСтроки(Новый Структура("ТипПремии",
			СтрокаНачисления.ТипПремии));
			
		Если НачисленияПоТипуПремии.Количество() Тогда
				СтрокаНачисления.СуммаБонуса = НачисленияПоТипуПремии[0].СуммаБонуса;
				СтрокаНачисления.БонусируемыйОборот = НачисленияПоТипуПремии[0].БонусируемыйОборот;
		КонецЕсли;	
		
	КонецЕсли;
	
	СтрокаНачисления.АналитикаУчетаБонуснойПрограммы = 
		Справочники.РА_КлючиАналитикиУчетаБонуснойПрограммы.ПодобратьКлючАналитикиУчетаБонуснойПрограммы(
		?(ЗначениеЗаполнено(Договор), Договор, Партнер), ПериодДействия, БонуснаяПрограмма.УидНастройкиБонуснойПрограммы);
		
	СтрокаНачисления.ПроцентПремии = БонуснаяПрограмма.ПроцентПремииЗаПланЗакупок;
		
КонецПроцедуры	

Процедура ОбработатьНачислениеБонусовЗаШоуРум(ТаблицаНачисленийПоБонуснойПрограмме, БонуснаяПрограмма)
	
	СтрокаНачисления = НачисленияАвтоматическийРасчет.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНачисления, БонуснаяПрограмма,,"ВалютаПлана, ПоказательПлана");
	
	СтрокаНачисления.ТипПремии = ПредопределенноеЗначение("Перечисление.РА_ТипыПремийПартнерам.ПремияЗаНаличиеШоуРума");
	
	
	НачисленияПоТипуПремии = ТаблицаНачисленийПоБонуснойПрограмме.НайтиСтроки(Новый Структура("ТипПремии",
					СтрокаНачисления.ТипПремии));
	
	Если НачисленияПоТипуПремии.Количество() Тогда
		СтрокаНачисления.СуммаБонуса = НачисленияПоТипуПремии[0].СуммаБонуса;
		СтрокаНачисления.БонусируемыйОборот = НачисленияПоТипуПремии[0].БонусируемыйОборот;
	КонецЕсли;
	
	СтрокаНачисления.АналитикаУчетаБонуснойПрограммы = 
		Справочники.РА_КлючиАналитикиУчетаБонуснойПрограммы.ПодобратьКлючАналитикиУчетаБонуснойПрограммы(
		?(ЗначениеЗаполнено(Договор), Договор, Партнер), ПериодДействия, БонуснаяПрограмма.УидНастройкиБонуснойПрограммы);
		
	СтрокаНачисления.ПроцентПремии = БонуснаяПрограмма.ПроцентПремииЗаШоуРум;
		
КонецПроцедуры

Процедура ОбработатьНачислениеБонусовЗаСложныйПродукт(ТаблицаНачисленийПоБонуснойПрограмме, БонуснаяПрограмма)
	
	СтрокаНачисления = НачисленияАвтоматическийРасчет.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаНачисления, БонуснаяПрограмма,,"ВалютаПлана, ПоказательПлана");
	
	СтрокаНачисления.ТипПремии = ПредопределенноеЗначение("Перечисление.РА_ТипыПремийПартнерам.ПремияЗаСложныйПродукт");
	
	НачисленияПоТипуПремии = ТаблицаНачисленийПоБонуснойПрограмме.НайтиСтроки(Новый Структура("ТипПремии",
					СтрокаНачисления.ТипПремии));
	
	Если НачисленияПоТипуПремии.Количество() Тогда
		СтрокаНачисления.СуммаБонуса = НачисленияПоТипуПремии[0].СуммаБонуса;
		СтрокаНачисления.БонусируемыйОборот = НачисленияПоТипуПремии[0].БонусируемыйОборот;
	КонецЕсли;	
	
	СтрокаНачисления.АналитикаУчетаБонуснойПрограммы = 
		Справочники.РА_КлючиАналитикиУчетаБонуснойПрограммы.ПодобратьКлючАналитикиУчетаБонуснойПрограммы(
		?(ЗначениеЗаполнено(Договор), Договор, Партнер), ПериодДействия, БонуснаяПрограмма.УидНастройкиБонуснойПрограммы);
		
	СтрокаНачисления.ПроцентПремии = БонуснаяПрограмма.ПроцентПремииЗаСложныйПродукт;
		
КонецПроцедуры

Функция ПолучитьТаблицуОборотовПоДоговору(Партнер, Договор, ПериодДействия)
			
	Если ЗначениеЗаполнено(Договор) Тогда
		МассивДоговоров = ПолучитьМассивДоговоровДляОтбораВыручки(Договор);
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура.Производитель КАК Производитель,
		|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК Количество,
		|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиРеглОборот КАК СуммаВыручкиВРублях,
		|	ЕСТЬNULL(ВыручкаИСебестоимостьПродажОбороты.ЗаказКлиента.Дата, ВыручкаИСебестоимостьПродажОбороты.Период) КАК Период
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			День,
		|			АналитикаУчетаПоПартнерам.Договор В (&Договор)
		|				И АналитикаУчетаНоменклатуры.Номенклатура.РА_ВходитВПланЗакупок_Бонусы) КАК ВыручкаИСебестоимостьПродажОбороты
		|";
		
		Запрос.УстановитьПараметр("Договор", МассивДоговоров);
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РА_НастройкиНачисленияБонусовПартнерам.ОбъектНастройки КАК Договор
		|ПОМЕСТИТЬ ВТ_ОтборДоговор
		|ИЗ
		|	РегистрСведений.РА_НастройкиНачисленияБонусовПартнерам КАК РА_НастройкиНачисленияБонусовПартнерам
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(РА_НастройкиНачисленияБонусовПартнерам.ОбъектНастройки) = ТИП(Справочник.ДоговорыКонтрагентов)
		|	И РА_НастройкиНачисленияБонусовПартнерам.ОбъектНастройки <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|	И РА_НастройкиНачисленияБонусовПартнерам.ПериодДействия = &ПериодДействия
		|	И РА_НастройкиНачисленияБонусовПартнерам.ОбъектНастройки.Партнер = &Партнер
		|
		|СГРУППИРОВАТЬ ПО
		|	РА_НастройкиНачисленияБонусовПартнерам.ОбъектНастройки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ПодчиненныеДоговоры
		|ИЗ
		|	ВТ_ОтборДоговор КАК ВТ_ОтборДоговор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО (ДоговорыКонтрагентов.РА_ОсновнойДоговор = ВТ_ОтборДоговор.Договор)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсключаемыеДоговоры.Договор КАК Договор
		|ПОМЕСТИТЬ ВТ_ИсключаемыеДоговоры
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ОтборДоговор.Договор КАК Договор
		|	ИЗ
		|		ВТ_ОтборДоговор КАК ВТ_ОтборДоговор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_ОтборДоговор.Договор.РА_ОсновнойДоговор
		|	ИЗ
		|		ВТ_ОтборДоговор КАК ВТ_ОтборДоговор
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_ПодчиненныеДоговоры.Ссылка
		|	ИЗ
		|		ВТ_ПодчиненныеДоговоры КАК ВТ_ПодчиненныеДоговоры) КАК ИсключаемыеДоговоры
		|ГДЕ
		|	ИсключаемыеДоговоры.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсключаемыеДоговоры.Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура.Производитель КАК Производитель,
		|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК Количество,
		|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиРеглОборот КАК СуммаВыручкиВРублях,
		|	ЕСТЬNULL(ВыручкаИСебестоимостьПродажОбороты.ЗаказКлиента.Дата, ВыручкаИСебестоимостьПродажОбороты.Период) КАК Период
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			День,
		|			НЕ АналитикаУчетаПоПартнерам.Договор В
		|						(ВЫБРАТЬ
		|							ВТ_ИсключаемыеДоговоры.Договор
		|						ИЗ
		|							ВТ_ИсключаемыеДоговоры КАК ВТ_ИсключаемыеДоговоры)
		|				И АналитикаУчетаНоменклатуры.Номенклатура.РА_ВходитВПланЗакупок_Бонусы) КАК ВыручкаИСебестоимостьПродажОбороты
		|";
		
		Запрос.УстановитьПараметр("Партнер", Партнер);
		Запрос.УстановитьПараметр("ПериодДействия", ПериодДействия);
		
	КонецЕсли;
	
	РеквизитыПериодаДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПериодДействия,"НачалоПериода, КонецПериода");
	
	Запрос.УстановитьПараметр("НачалоПериода", РеквизитыПериодаДействия.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(РеквизитыПериодаДействия.КонецПериода));
	
	ТаблицаОборотовПоДоговоруЗаПериод = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОборотовПоДоговоруЗаПериод;
	
КонецФункции

Функция ПолучитьМассивДоговоровДляОтбораВыручки(Договор)

	МассивДоговоров = Новый Массив;
	МассивДоговоров.Добавить(Договор);
	
	ОсновнойДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор,"РА_ОсновнойДоговор");
	
	Если ЗначениеЗаполнено(ОсновнойДоговор) Тогда
		МассивДоговоров.Добавить(ОсновнойДоговор);	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.РА_ОсновнойДоговор = &Договор
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоговорыКонтрагентов.Ссылка";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивДоговоров.Добавить(ВыборкаДетальныеЗаписи.Договор);	
	КонецЦикла;
	
	МассивДоговоров = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивДоговоров);
	
	Возврат МассивДоговоров;
	
КонецФункции	

Функция ИнициализироватьТаблицуНачисленийБонусов(Партнер, Договор, ПериодДействия, УидБонуснойПрограммы)
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	РА_КлючиАналитикиУчетаБонуснойПрограммы.Ссылка КАК Ссылка
	              |ПОМЕСТИТЬ ВТ_ОтборАналитика
	              |ИЗ
	              |	Справочник.РА_КлючиАналитикиУчетаБонуснойПрограммы КАК РА_КлючиАналитикиУчетаБонуснойПрограммы
	              |ГДЕ
	              |	РА_КлючиАналитикиУчетаБонуснойПрограммы.ОбъектНастройки В (&ОбъектНастройки)
	              |	И РА_КлючиАналитикиУчетаБонуснойПрограммы.ПериодДействия = &ПериодДействия
	              |	И РА_КлючиАналитикиУчетаБонуснойПрограммы.УидБонуснойПрограммы = &УидБонуснойПрограммы
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	РА_БонусыПартнерамОстатки.ТипПремии КАК ТипПремии,
	              |	РА_БонусыПартнерамОстатки.СуммаОстаток КАК СуммаБонуса,
	              |	РА_БонусыПартнерамОстатки.СуммаВыручкиОстаток КАК БонусируемыйОборот
	              |ИЗ
	              |	РегистрНакопления.РА_БонусыПартнерам.Остатки(
	              |			&Период,
	              |			АналитикаУчетаБонуснойПрограммы В
	              |				(ВЫБРАТЬ
	              |					ВТ_ОтборАналитика.Ссылка КАК Ссылка
	              |				ИЗ
	              |					ВТ_ОтборАналитика КАК ВТ_ОтборАналитика)) КАК РА_БонусыПартнерамОстатки"; 
	
	
	Если Не Договор.Пустая() Тогда

		МассивДоговоров = Новый Массив;
		МассивДоговоров.Добавить(Договор);
		
		ЗначениеОсновногоДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "РА_ОсновнойДоговор");
		
		Если ЗначениеЗаполнено(ЗначениеОсновногоДоговора) Тогда
			МассивДоговоров.Добавить(ЗначениеОсновногоДоговора);
		КонецЕсли;	
		
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("УидБонуснойПрограммы", УидБонуснойПрограммы);
	Запрос.УстановитьПараметр("ОбъектНастройки", ?(Договор.Пустая(), Партнер, МассивДоговоров));
	Запрос.УстановитьПараметр("ПериодДействия", ПериодДействия);
    Запрос.УстановитьПараметр("Период", Новый Граница(ПериодДействия.КонецПериода, ВидГраницы.Исключая));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;	
	
КонецФункции	

Процедура ПриЗаписи(Отказ)
	
	Если НЕ ПометкаУдаления Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РА_НачислениеБонусовПартнерам.Договор КАК Договор,
		|	РА_НачислениеБонусовПартнерам.Партнер КАК Партнер,
		|	РА_НачислениеБонусовПартнерам.ПериодДействия КАК ПериодДействия
		|ИЗ
		|	Документ.РА_НачислениеБонусовПартнерам КАК РА_НачислениеБонусовПартнерам
		|ГДЕ
		|	РА_НачислениеБонусовПартнерам.Ссылка <> &Ссылка
		|	И НЕ РА_НачислениеБонусовПартнерам.ПометкаУдаления
		|	И РА_НачислениеБонусовПартнерам.Договор = &Договор
		|	И РА_НачислениеБонусовПартнерам.Партнер = &Партнер";
		
		Запрос.УстановитьПараметр("Ссылка",  Ссылка);
		Запрос.УстановитьПараметр("Договор", Договор);
		Запрос.УстановитьПараметр("Партнер", Партнер);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ОбщегоНазначения.СообщитьПользователю("С такими параметрами уже созданы документы ""Начисления бонусов по партнерам""! Запись невозможна!",
			,,,Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
